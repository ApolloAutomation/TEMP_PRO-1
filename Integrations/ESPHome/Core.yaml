substitutions:
  version: "25.6.10.1"
  device_description: $TEMP_PRO-1 made by Apollo Automation - version ${version}.

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf

api:
  id: api_server
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
  reboot_timeout: 0s
  on_client_connected:
    then:
      - delay: 5s
      - if:
          condition:
            or:
              - binary_sensor.is_on: ota_mode
              - switch.is_on: prevent_sleep
          then:
            - lambda: |- 
                ESP_LOGW("Apollo", "Preventing Deep Sleep Due To OTA Or Switch");
                id(deep_sleep_1).prevent_deep_sleep(); 
          else: 
            - switch.turn_on: accessory_power
            - delay: 10s
            - lambda: |-
                id(reportAllValues).execute();
            - delay: 5s
            - deep_sleep.enter:
                id: deep_sleep_1
globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'

i2c:
  sda: GPIO16
  scl: GPIO17
  id: bus_a

web_server:
  id: webserver
  port: 80

one_wire:
  - platform: gpio
    id: one_wire_bus
    pin: GPIO6

# Buzzer
output:
  - platform: ledc
    pin: GPIO8
    id: buzzer

rtttl:
  id: rtttl_buzzer
  output: buzzer

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
            }

  - platform: template
    name: Temperature Within Range
    id: temp_within_range
    lambda: 'bool sht_valid = !isnan(id(sht_temperature).state); bool dallas_valid = !isnan(id(temp_probe).state); bool sht_in_range = !sht_valid || ((id(sht_temperature).state <= id(max_temp).state) && (id(sht_temperature).state >= id(min_temp).state)); bool dallas_in_range = !dallas_valid || ((id(temp_probe).state <= id(max_temp).state) && (id(temp_probe).state >= id(min_temp).state)); return (sht_valid || dallas_valid) && sht_in_range && dallas_in_range;'

  - platform: template
    name: Humidity Within Range
    id: humidity_within_range
    # Note: If additional humidity sensors are added, expand this logic following the temperature sensor pattern
    lambda: 'bool sht_valid = !isnan(id(sht_humidity).state); bool sht_in_range = !sht_valid || ((id(sht_humidity).state <= id(max_humidity).state) && (id(sht_humidity).state >= id(min_humidity).state)); return (sht_valid) && sht_in_range;'

  - platform: template
    name: Alarm Active
    id: alarm_active
    lambda: 'return (id(alarm_outside_temp_range).state && !id(temp_within_range).state) || (id(alarm_outside_humidity_range).state && !id(humidity_within_range).state);'
    on_release:
      then:
        - light.turn_off: rgb_light

  - platform: homeassistant
    name: "OTA Mode"
    id: ota_mode
    entity_id: input_boolean.apollo_ota_mode
    on_press:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_release:  
      then:
        - if:
            condition:
              switch.is_off: prevent_sleep
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    disabled_by_default: true

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: sht3xd
    id: sht30
    temperature:
      name: "SHT Temperature"
      id: sht_temperature
    humidity:
      name: "SHT Relative Humidity"
      id: sht_humidity

  - platform: dallas_temp
    name: "Dallas Temperature Probe"
    update_interval: 60s
    id: temp_probe
    filters:
      - lambda: |-
          if (isnan(x)) {
            return NAN;
          }

          if (x == 85.0) {
              return NAN;
          }

          return x;

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO4
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 4
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: template
    name: "Update Firmware"
    id: update_firmware
    entity_category: config
    on_press:
      then:
        - lambda: |-
            id(update_http_request).perform(true);
    
            
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    id: restart_button

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

number:
  - platform: template
    id: min_temp
    name: Min Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: -20
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: max_temp
    name: Max Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: 200
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: min_humidity
    name: Min Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 0
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: max_humidity
    name: Max Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 100
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config


switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

  - platform: gpio
    pin: GPIO7
    name: "Accessory Power"
    id: accessory_power
    restore_mode: ALWAYS_ON
    setup_priority: 1100
    internal: true

  - platform: template
    name: "Alarm Outside Temp Range"
    id: alarm_outside_temp_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

    
  - platform: template
    name: "Alarm Outside Humidity Range"
    id: alarm_outside_humidity_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    name: "Prevent Sleep"
    id: prevent_sleep
    icon: mdi:sleep
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_turn_off:
      then:
        - if:
            condition:
              binary_sensor.is_off: ota_mode
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();

interval:
  - interval: 10s
    id: alarm_check_interval
    startup_delay: 60s
    then:
      - script.execute: alarm_script
script:
  - id: alarm_script
    then:
      - if:
          condition:
            lambda: !lambda |-
              return id(alarm_active).state;
          then:
            - lambda: !lambda |-
                id(rgb_light).turn_on().set_effect("Fast Pulse").perform();
                id(rgb_light).turn_on().set_rgb(1, 0, 0).set_transition_length(0).perform();
                id(rtttl_buzzer).play("siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e;");

text_sensor:
  - platform: template
    name: "OTA URL"
    id: ota_url
    entity_category: "diagnostic"
    internal: true